procedure product_one_tuple(G,cycle_types,permutations,index,Z,prod)
    Z:=Centralizer(Z,permutations[index-1]); 
    C:=Conjugates(G,cycle_types[index]);    
    while C ne {} do
        permutations[index]:=Random(C);
        C diff:={permutations[index]^i:i in Z};
        H := sub<G | permutations>;
        prodt := prod* permutations[index];
        if index eq #cycle_types-1 then   
            if IsConjugate(G,prodt,cycle_types[index+1]) then
                 H := sub<G|permutations>;
                 if IsTransitive(H) then
                     permutations[index+1]:= (prodt)^(-1);
                     permutations;
                 end if;    
             else
                continue;
            end if;
        else
            product_one_tuple(G,cycle_types,permutations,index + 1,Z,prodt);
        end if;
    end while; 
end procedure  ;

G := Sym(5);
cycle_types := [];
permutations := [];
cycle_types[1] := G!(1,2,3,4,5);
cycle_types[2] := G!(1,2,3)(4,5);
cycle_types[3] := G!(4,5);
cycle_types[4] :=  G!(4,5);
cycle_types[5] :=  G!(4,5);
permutations[1] := cycle_types[1];
product_one_tuple(G,cycle_types,permutations,2,G,cycle_types[1] );
 a:=  G!(1, 2, 3, 4, 5);
   b:=  G!(1, 5)(2, 4, 3);
   c:= G!(3, 4);
   d:= G!(1, 3);
   e:= G!(3, 4);
a*b*c*d*e;